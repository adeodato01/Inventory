package model;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/** This class represents products in our inventory.
 *
 */
public class Product {

    private ObservableList<Part> associatedParts = FXCollections.observableArrayList();
    private int id;
    private String name;
    private double price;
    private int stock;
    private int min;
    private int max;

    /** This is a product constructor
     *
     * @param id integer of the Product ID (Autogenerated)
     * @param name a String of the product name
     * @param price a double of the product's price
     * @param stock an integer for the product's inventory amount
     * @param min an integer for the minimum number of products on-hand
     * @param max an integer for the maximum number of products on-hand
     */
    public Product(int id, String name, double price, int stock, int min, int max) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.stock = stock;
        this.min = min;
        this.max = max;
    }

    /** This is the product ID getter
     *
     * @return the product ID
     */
    public int getId() {
        return id;
    }

    /** This is the product ID setter
     *
     * @param id integer of the Product ID
     */
    public void setId(int id) {
        this.id = id;
    }

    /** This is the product name getter
     *
     * @return the product name
     */
    public String getName() {
        return name;
    }

    /** This is the product name setter
     *
     * @param name a String of the product name
     */
    public void setName(String name) {
        this.name = name;
    }

    /** This is the product price getter
     *
     * @return the product price
     */
    public double getPrice() {
        return price;
    }

    /** This is the product price setter
     *
     * @param price a double of the product's price
     */
    public void setPrice(double price) {
        this.price = price;
    }

    /** This is the product inventory getter
     *
     * @return the product's inventory on-hand
     */
    public int getStock() {
        return stock;
    }

    /** This is the product inventory setter
     *
     * @param stock an integer for the product's inventory amount
     */
    public void setStock(int stock) {
        this.stock = stock;
    }

    /** This is the product's minimum quantity getter
     *
     * @return the product's minimum quantity
     */
    public int getMin() {
        return min;
    }

    /** This is the product's minimum quantity setter
     *
     * @param min an integer for the minimum number of products on-hand
     */
    public void setMin(int min) {
        this.min = min;
    }

    /** This is the product's maximum quantity getter
     *
     * @return the product's maximum quantity
     */
    public int getMax() {
        return max;
    }

    /** This is the product's maximum quantity setter
     *
     * @param max an integer for the maximum number of products on-hand
     */
    public void setMax(int max) {
        this.max = max;
    }

    /** This method adds a Part to the Product's associated part list
     *
     * @param part a part to be added to the associated part list
     */
    public void addAssociatedPart(Part part) {
        associatedParts.add(part);
    }

    /** This method removes a Part from the Product's associated part list
     * @// FIXME: 5/15/2022 Create the logic to delete a part.
     * @param selectedAssociatedPart a part selected from the GUI
     * @return a boolean; Was the part removed? True or False
     */
    public boolean deleteAssociatedPart(Part selectedAssociatedPart) {
        return true;
    }

    /** This method returns a list of all the associated parts.
     *
     * @return an ObservableList of parts
     */
    public ObservableList<Part> getAllAssociatedParts() {
        return associatedParts;
    }
}
